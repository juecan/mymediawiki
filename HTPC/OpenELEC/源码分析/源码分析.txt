===源码分析===

==== 相关目录 ====

*源码目录及文件

 projects：项目目录（Generic、Inter、Virtual……）
 Makefile
 scripts：编译所用脚本
 config：编译使用的一些变量、函数
 packages：所需的安装包信息
 tools：
 licenses：
 .git：
 .gitignore：
 .gitmodules：
 CHANGELOG
 CONTRIBUTING.md
 create_tar.sh
 TODO
 README.md

 scripts/build
 	查找包信息文件，如：packages/virtual/toolchain/package.mk

 config/path：编译安装包路径、库函数路径、命令路径等
 	查找包信息文件路劲，如：packages/virtual/toolchain/
 	生成该包的项目路径，如：build.OpenELEC-Generic.x86_64-devel/toolchain/
 	定义颜色

 scripts/get 从包信息文件中获取下载信息下载安装包
 	生成 .url 文件，内容为包信息文件中的 PKG_URL
 	生成 .md5 加密文件：md5sum -t $PACKAGE > $MD5SUM

 scripts/extract：解压安装包

 scripts/unpack：解压 + 打补丁

 scripts/build：解压 + 编译

 scripts/image：
 	检查依赖包
 	编译 toolchain、squashfs、fakeroot、kmod：使用 scripts/build
 	建立文件系统：创建系统相关文件夹及系统属性文件
 	安装相关程序：libc gcc linux linux-drivers linux-firmware $BOOTLOADER busybox util-linux corefonts network 等（使用 scripts/install），并拷贝相应配置文件
 	建立 squashfs 系统
 	生成 img 文件

*编译后生成的目录

 sources：下载的安装包
 build.OpenELEC-Virtual.i386-devel：编译的项目目录

==== 编译过程 ====

 PROJECT=Virtual ARCH=i386 make release
 -> Makefile: ./scripts/image release
 -> scripts/image:

 Makefile
  |-> scripts/image
  ||-> scripts/checkdeps build
  ||-> scripts/build: toolchain squashfs:host fakeroot:host kmod:host
  |||-> scripts/unpack
  ||||-> scripts/get: download package to source folder
  ||||-> * pre_unpack(), unpack()
  ||||-> scripts/extract: extract from package
  ||||-> * post_unpack(), pre_patch(), post_patch() -> package.mk
  |||-> * setup_toolchain()
  |||-> * config build options
  |||-> * build depends
  |||-> scripts/autoreconf
  |||-> * setup configure script
  |||-> * virtual packages dont must be build, they only contains dependencies
  |||-> * pre_build_target/host/init/bootstrap()
  |||-> * pre_configure_target/host/init/bootstrap()
  |||-> * PKG_CONFIGURE_SCRIPT="$ROOT/$PKG_BUILD/configure
  |||-> * post_configure_target/host/init/bootstrap()
  |||-> * pre_make_
  |||-> * make
  |||-> * post_make_
  |||-> * pre_makeinstall_
  |||-> * makeinstall_
  |||-> * $STRIP
  ||-> * setup version, name
  ||-> * setup fakeroot
  ||-> * clean old install dirs: SYSTEM etc
  ||-> * create baselayout: /bin, /etc/release, etc
  ||-> * create /etc/os-release
  ||-> * create /etc/issue
  ||-> * create Basissystem
  |||-> scripts/install: libc gcc linux linux-drivers linux-firmware $BOOTLOADER busybox util-linux corefonts network
  ||||-> scripts/build
  ||||-> scripts/install depends
  ||||-> * pre_install()
  ||||-> * post_install()
  ||-> * Graphic support, Sound support, Multimedia support, Automounter support, NTFS 3G support, NTFS 3G support, Remote support, LCD support, Sensors support, Installer support, Devtools, OEM packages
  |||-> scripts/install: DISPLAYSERVER, mediacenter, alsa, udevil, fuse-exfat, ntfs-3g_ntfsprogs, remote, lcdproc, lm_sensors, installer, testing+debug, oem
  ||-> * copy project related files to filesystem
  ||-> * run depmod
  |||-> * $ROOT/$TOOLCHAIN/bin/depmod
  ||-> * strip kernel modules
  |||-> * $STRIP
  ||-> * make target dir
  ||-> * copy kernel to target dir
  ||-> * create squashfs file
  ||-> * run fakeroot
  ||-> * set permissions
  |||-> * cleanup
  ||||-> * create release dir
  |||||-> * remove n previous created release image
  |||-> * create md5sum's
  |||-> * create target directory
  |||-> * remove an previous created release tarball
  |||-> * create release tarball
  |||-> * create image files if requested
  ||||-> * variables used in image script must be passed
  |||-> * cleanup release dir
  |||-> * cleanup
  |||-> * create release dir
  |||-> * create System dir
  ||||-> * copy Bootloader
  ||||-> * copy system files
  ||||-> * create md5sum's
  ||||-> * copy additional files
  |||-> * create Storage dir
  |||-> * remove an previous created release tarball
  |||-> * create filesystem tarballs
  |||-> * remove an filesystem dirs
  |||-> * remove an previous created release tarball
  |||-> * create release tarball
  |||-> * cleanup release dir

==== 源码分析 ====

*PROJECT=Virtual ARCH=i386 make release

  -> Makefile: ./scripts/image release
 -> scripts/image:
 	$1 -> release
 	. config/options $1
 		LC_ALL=C
 		PROJECT="Generic"
 		TARGET_ARCH="i386"
 		ROOT=/home/along/source_code/OpenELEC.tv-20141006
 		PROJECT_DIR="/home/along/source_code/OpenELEC.tv-20141006/projects"
 		LINUX_DEPENDS="/home/along/source_code/OpenELEC.tv-20141006/projects/Generic/linux/linux.$TARGET_ARCH.conf /home/along/source_code/OpenELEC.tv-20141006/packages/linux/package.mk"
 		. /home/along/source_code/OpenELEC.tv-20141006/projects/Generic/options
 			DISTRONAME="OpenELEC"
 			DESCRIPTION="OpenELEC is a fast and userfriendly XBMC Mediacenter distribution."
 			GREETING1="# OpenELEC - The living room PC for everyone #"
 			ROOT_PASSWORD="openelec"
 			TARGET_CPU="x86-64"
 			BOOTLOADER="syslinux"
 			UBOOT_VERSION="default"
 			GCC_VERSION="default"
 			LINUX="default"
 			SQUASHFS_COMPRESSION="gzip"
 			MEDIACENTER="xbmc"
 			SKINS="Confluence"
 			ADDITIONAL_DRIVERS="RTL8192CU RTL8192DU RTL8188EU RTL8812AU dvbhdhomerun
 			WEBSERVER="yes"
 			SSHLIB_SUPPORT="yes"
 			NFS_SUPPORT="yes"
 		. config/graphic
 		. config/path $1(release) 设置编译的项目目录结构
 			SCRIPTS=scripts
 	show_config 显示配置信息
 	scripts/checkdeps build 检查依赖

unset 删除变量
set -e 若指令传回值不等于0，则立即退出 shell

*源码中修改初始密码

 packages/sysutils/busybox/install:ROOT_PWD="`$ROOT/$TOOLCHAIN/bin/cryptpw -m sha512 $ROOT_PASSWORD`"
 	config/options:ROOT=`pwd`
 	config/path:TOOLCHAIN=$BUILD/toolchain
 	projects/Generic/options:  ROOT_PASSWORD="openelec"

*源码中添加用户

 packages/sysutils/busybox/install:add_user root "$ROOT_PWD" 0 0 "Root User" "/storage" "/bin/sh"

*默认显示的主机名

 projects/Generic/options:    DISTRONAME="OpenELEC"
